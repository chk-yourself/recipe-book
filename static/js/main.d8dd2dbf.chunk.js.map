{"version":3,"sources":["aws-exports.js","components/App/App.jsx","serviceWorker.js","index.js"],"names":["awsmobile","aws_project_region","aws_cognito_identity_pool_id","aws_cognito_region","aws_user_pools_id","aws_user_pools_web_client_id","oauth","domain","scope","redirectSignIn","redirectSignOut","responseType","federationTarget","aws_appsync_graphqlEndpoint","aws_appsync_region","aws_appsync_authenticationType","aws_appsync_apiKey","App","react_default","a","createElement","className","Boolean","window","location","hostname","match","Amplify","configure","config","client","AWSAppSyncClient","url","region","auth","type","apiKey","ReactDOM","render","react_apollo_esm","react_router_dom","basename","process","aws_appsync_react_lib","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRA6BeA,EA3BG,CACdC,mBAAsB,YACtBC,6BAAgC,iDAChCC,mBAAsB,YACtBC,kBAAqB,sBACrBC,6BAAgC,6BAChCC,MAAS,CACLC,OAAU,mDACVC,MAAS,CACL,QACA,QACA,SACA,UACA,iCAEJC,eAAkB,yBAClBC,gBAAmB,yBACnBC,aAAgB,QAEpBC,iBAAoB,qBACpBC,4BAA+B,iFAC/BC,mBAAsB,YACtBC,+BAAkC,UAClCC,mBAAsB,yCCfXC,MARf,WACE,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNNC,IAAQC,UAAUC,GAElB,IAAMC,EAAS,IAAIC,IAAiB,CAClCC,IAAKH,EAAOhB,4BACZoB,OAAQJ,EAAOf,mBACfoB,KAAM,CACJC,KAAMN,EAAOb,mBACboB,OAAQP,EAAOd,kCAInBsB,IAASC,OACPpB,EAAAC,EAAAC,cAACmB,EAAA,eAAD,CAAgBT,OAAQA,GACtBZ,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAQC,SAAUC,gBAChBxB,EAAAC,EAAAC,cAACuB,EAAA,WAAD,KACEzB,EAAAC,EAAAC,cAACwB,EAAD,SAINC,SAASC,eAAe,SDkGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d8dd2dbf.chunk.js","sourcesContent":["// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-west-2\",\n    \"aws_cognito_identity_pool_id\": \"us-west-2:748d3f59-1bc1-4396-80b4-72d69aa2e23f\",\n    \"aws_cognito_region\": \"us-west-2\",\n    \"aws_user_pools_id\": \"us-west-2_4AmptXIlt\",\n    \"aws_user_pools_web_client_id\": \"44752kcs1b0vrac8uhs8e98dt6\",\n    \"oauth\": {\n        \"domain\": \"recipe-book-dev.auth.us-west-2.amazoncognito.com\",\n        \"scope\": [\n            \"phone\",\n            \"email\",\n            \"openid\",\n            \"profile\",\n            \"aws.cognito.signin.user.admin\"\n        ],\n        \"redirectSignIn\": \"http://localhost:3000/\",\n        \"redirectSignOut\": \"http://localhost:3000/\",\n        \"responseType\": \"code\"\n    },\n    \"federationTarget\": \"COGNITO_USER_POOLS\",\n    \"aws_appsync_graphqlEndpoint\": \"https://qdej675xbjaale227k52sepkw4.appsync-api.us-west-2.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-west-2\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-z52a7h3wbfevhobzaovu75pj4e\"\n};\n\n\nexport default awsmobile;\n","import React from 'react';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Amplify from 'aws-amplify';\nimport { ApolloProvider } from 'react-apollo';\nimport AWSAppSyncClient from 'aws-appsync';\nimport { Rehydrated } from 'aws-appsync-react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport config from './aws-exports';\nimport './index.css';\nimport { App } from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nAmplify.configure(config);\n\nconst client = new AWSAppSyncClient({\n  url: config.aws_appsync_graphqlEndpoint,\n  region: config.aws_appsync_region,\n  auth: {\n    type: config.aws_appsync_apiKey,\n    apiKey: config.aws_appsync_authenticationType\n  }\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <Router basename={process.env.PUBLIC_URL}>\n      <Rehydrated>\n        <App />\n      </Rehydrated>\n    </Router>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}